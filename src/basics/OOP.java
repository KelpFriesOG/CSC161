package basics;

public class OOP {
	/* The driving philosophy of Object Oriented Programming is reusability and modularity. */
	/* A class is a template and objects are implementations of certain classes. */
	
	public static class Car { // Remember to make the class static to allow for nested classes w/o association.
		/*If the name of the file was Car, then we would not need the
		 * public static class header! my bad~! everything else is the same! */
		
		// Only static members of Outer class is directly accessible in nested static class
		String brand;
		String model;
		int year;
		String color;
		
		// Default Constructor (handles empty initialization)!
		public Car() {
			
		}
		
		// Constructor 1
		public Car(String brand, String model, int year, String color) { 
			/*This can be auto generated by highlighting the associated variables 
			 * right clicking and then: Source > Generate Constructor using Fields*/
			super();
			/* left-hand side refers to car's member, right hand side is 
			 * user defined argument */
			this.brand = brand; 
			this.model = model;
			this.year = year;
			this.color = color;
		}
		
		
		
		public static void accelerate() {
			System.out.println("Car goes VROOM VROOM");
		}
	
		public boolean isOutdated() {
			boolean isOld =  2022 - year <= 5  ? false: true; 
			return isOld;
		}
		
		
		
	}
	
	// Test class (this does not run when the file is called for the Car class)
	public static void main(String[] args) {
	    Car myCar = new Car("Ferrari", "Enzo", 1999, "Black");
	    System.out.println(myCar.brand + " " +myCar.model);
	  }

	/* By default classes and their inner methods are only accesible from within the package of their implementation.
	 * However, we can apply keywords to change this! The "public" keyword makes classes or method code available from any other class.
	 * 
	 * A class can be public, or no access modifier.
	 * Other modifiers which can be applied are:
	 * final --> The class cannot be inheritered by other classes
	 * abstract --> The class cannot be used to create objects and is only accesible via inheritance
	 * 
	 * Methods and attributes also have two types of modifiers:
	 * Access modifiers
	 * public --> explained prior
	 * private --> The code is only accessible within the declared class.
	 * protected --> The code is accesible in the declared class or any subclasses which inherit from it
	 * 
	 * Non-Access modifiers
	 * final --> Attribute or method cannot be overriden or changed in any way
	 * static --> Attributes and methods belong to the class rather than the object 
	 * (you can call the methods without an associated class as a precedent)
	 * abstract --> Only applicable to methods in abstract classes. This represents a template or contract of an
	 * empty method that is due to be filled or interpreted differently by different subclasses. (Inheritance)
	 * transient --> Attributes or methods which get skipped when serializing the object containing them 
	 * (making a list of the multiple instances of the object)
	 * synchronized (or sync) --> Refers to methods which can only be accessed by one thread at a time
	 * volatile --> Refers to an attribute whose value is not cached on a per thread basis, but rather read from the
	 * main memory itself. */
	
}
